
services:
  # --------------------
  # Nginx Reverse Proxy
  # --------------------
  nginx:
    image: nginx:1.27
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped

  # --------------------
  # Backend Web (Flask + Gunicorn)
  # --------------------
  web:
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://127.0.0.1:8000/health',timeout=3).getcode()==200 else sys.exit(1)"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    build: ./backend
    command: "gunicorn --chdir /app -w 2 -b 0.0.0.0:8000 app.app:app"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db:5432/diagpilote
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - db
      - redis
    networks:
      default:
        aliases:
          - web
    restart: unless-stopped

  # --------------------
  # Worker pour tâches asynchrones (emails, PDF, OCR...)
  # --------------------
  worker:
    build: ./backend
    command: "python3 worker.py"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db:5432/diagpilote
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # --------------------
  # Scheduler (planification des tâches)
  # --------------------
  scheduler:
    build: ./backend/scheduler
    command: "python3 scheduler.py"
    volumes:
      - ./backend/scheduler:/app
    environment:
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db:5432/diagpilote
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # --------------------
  # Base de données PostgreSQL
  # --------------------
  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: diagpilote
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

  # --------------------
  # Redis (queue pour worker)
  # --------------------
  redis:
    image: redis:7
    restart: unless-stopped

  # --------------------
  # Certbot (pour SSL Let’s Encrypt)
  # --------------------
  certbot:
    image: certbot/certbot:v2.8.0
    volumes:
      - /var/www/certbot:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    restart: unless-stopped

# --------------------
# Volumes persistants
# --------------------
volumes:
  db_data:
