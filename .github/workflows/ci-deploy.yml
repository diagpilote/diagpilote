name: CI & Deploy

on:
  push:
    branches: ["main"]         # D√©clenche sur push main
  workflow_dispatch:            # Permet de lancer manuellement

concurrency:
  group: ci-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      OWNER: ${{ github.repository_owner }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # --- Build Web / Backend ---
      - name: Build & push web
        run: |
          if [ -f backend/Dockerfile ]; then
            docker build -t ${REGISTRY}/${OWNER}/diagpilote-web:latest -f backend/Dockerfile backend
            docker push ${REGISTRY}/${OWNER}/diagpilote-web:latest
          else
            echo "‚ö†Ô∏è Aucun Dockerfile trouv√© dans backend/, √©tape ignor√©e."
          fi

      # --- Build Worker ---
      - name: Build & push worker (if present)
        if: hashFiles('worker/Dockerfile') != ''
        run: |
          docker build -t ${REGISTRY}/${OWNER}/diagpilote-worker:latest -f worker/Dockerfile worker
          docker push ${REGISTRY}/${OWNER}/diagpilote-worker:latest

      # --- Build Scheduler ---
      - name: Build & push scheduler (if present)
        if: hashFiles('scheduler/Dockerfile') != ''
        run: |
          docker build -t ${REGISTRY}/${OWNER}/diagpilote-scheduler:latest -f scheduler/Dockerfile scheduler
          docker push ${REGISTRY}/${OWNER}/diagpilote-scheduler:latest

      # --- Build Nginx ---
      - name: Build & push nginx (if present)
        if: hashFiles('nginx/Dockerfile') != ''
        run: |
          docker build -t ${REGISTRY}/${OWNER}/diagpilote-nginx:latest -f nginx/Dockerfile nginx
          docker push ${REGISTRY}/${OWNER}/diagpilote-nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH deploy (compose pull + up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"

            echo "üîë Login to GHCR..."
            docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" -p "${{ secrets.GHCR_TOKEN }}"

            echo "‚¨áÔ∏è Pull latest images..."
            docker compose -f docker-compose.yml -f docker-compose.override.yml pull web || true
            docker compose -f docker-compose.yml -f docker-compose.override.yml pull worker || true
            docker compose -f docker-compose.yml -f docker-compose.override.yml pull scheduler || true
            docker compose -f docker-compose.yml -f docker-compose.override.yml pull nginx || true

            echo "üöÄ Restart services..."
            docker compose -f docker-compose.yml -f docker-compose.override.yml up -d

            echo "üßπ Cleanup images..."
            docker image prune -f || true

            echo "üìä Current containers:"
            docker compose ps
