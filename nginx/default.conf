# --- DIAGPILOTE NGINX CLEAN CONF ---

# HTTP: redirection vers HTTPS, mais on laisse passer l'ACME challenge
server {
    listen 80;
    server_name diagpilote.app www.diagpilote.app;

    http2 on;

    # ACME challenge pour Certbot (ne pas rediriger)
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    return 301 https://$host$request_uri;
}
# HTTPS: proxy vers l'app Flask (web:8000)
server {
    listen 443 ssl;
    server_name diagpilote.app www.diagpilote.app;

    http2 on;

    ssl_certificate     /etc/letsencrypt/live/diagpilote.app/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/diagpilote.app/privkey.pem;

    # En-têtes de sécurité de base
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";

    # ACME challenge (au cas où certbot passe par 443)
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirection de la racine (Flask le fait déjà mais on garde)
    location = / { return 302 /kanban; }

    # Anti-probes (WordPress, phpMyAdmin, scanners) — bien DANS server{}
    location ~* /(wp-admin|wp-login|wp-content|wp-includes|xmlrpc\.php|phpmyadmin|pma) {
        return 444;
    }

    # Proxy vers l'app Flask (service "web" du docker compose)
    location / {
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 60s;
        proxy_connect_timeout 10s;
        client_max_body_size 25m;
    }
}
